{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/stagingMediLingua/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/stagingMediLingua/src/ai/flows/medical-question-wolof.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent to answer medical questions in Wolof.\n *\n * - answerMedicalQuestionWolof - A function that handles the medical question answering process in Wolof.\n * - AnswerMedicalQuestionWolofInput - The input type for the answerMedicalQuestionWolof function.\n * - AnswerMedicalQuestionWolofOutput - The return type for the answerMedicalQuestionWolof function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnswerMedicalQuestionWolofInputSchema = z.object({\n  question: z.string().describe('The medical question asked in Wolof.'),\n});\nexport type AnswerMedicalQuestionWolofInput = z.infer<typeof AnswerMedicalQuestionWolofInputSchema>;\n\nconst AnswerMedicalQuestionWolofOutputSchema = z.object({\n  answer: z.string().describe('The answer to the medical question in Wolof.'),\n});\nexport type AnswerMedicalQuestionWolofOutput = z.infer<typeof AnswerMedicalQuestionWolofOutputSchema>;\n\nexport async function answerMedicalQuestionWolof(input: AnswerMedicalQuestionWolofInput): Promise<AnswerMedicalQuestionWolofOutput> {\n  return answerMedicalQuestionWolofFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'answerMedicalQuestionWolofPrompt',\n  input: {schema: AnswerMedicalQuestionWolofInputSchema},\n  output: {schema: AnswerMedicalQuestionWolofOutputSchema},\n  prompt: `You are a helpful AI assistant specializing in providing medical information in Wolof.\n  Answer the following medical question in Wolof:\\n\\n  {{question}}`,\n});\n\nconst answerMedicalQuestionWolofFlow = ai.defineFlow(\n  {\n    name: 'answerMedicalQuestionWolofFlow',\n    inputSchema: AnswerMedicalQuestionWolofInputSchema,\n    outputSchema: AnswerMedicalQuestionWolofOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGO,eAAe,uCAAwB,GAAxB,2BAA2B,KAAsC;IACrF,OAAO,+BAA+B;AACxC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqC;IACrD,QAAQ;QAAC,QAAQ;IAAsC;IACvD,QAAQ,CAAC;mEACwD,CAAC;AACpE;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IArBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":["file:///home/user/stagingMediLingua/src/ai/flows/medical-question-french.ts"],"sourcesContent":["// This is an autogenerated file from Firebase Studio.\n'use server';\n\n/**\n * @fileOverview A medical question answering AI agent that answers medical questions in French.\n *\n * - medicalQuestionFrench - A function that handles medical questions in French.\n * - MedicalQuestionFrenchInput - The input type for the medicalQuestionFrench function.\n * - MedicalQuestionFrenchOutput - The return type for the medicalQuestionFrench function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst MedicalQuestionFrenchInputSchema = z.object({\n  question: z.string().describe('The medical question in French.'),\n});\nexport type MedicalQuestionFrenchInput = z.infer<typeof MedicalQuestionFrenchInputSchema>;\n\nconst MedicalQuestionFrenchOutputSchema = z.object({\n  answer: z.string().describe('The answer to the medical question in French.'),\n});\nexport type MedicalQuestionFrenchOutput = z.infer<typeof MedicalQuestionFrenchOutputSchema>;\n\nexport async function medicalQuestionFrench(input: MedicalQuestionFrenchInput): Promise<MedicalQuestionFrenchOutput> {\n  return medicalQuestionFrenchFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'medicalQuestionFrenchPrompt',\n  input: {schema: MedicalQuestionFrenchInputSchema},\n  output: {schema: MedicalQuestionFrenchOutputSchema},\n  prompt: `Tu es un chatbot médical qui répond aux questions médicales en français. Réponds à la question suivante de manière précise et concise.\\n\\nQuestion: {{{question}}}`,\n});\n\nconst medicalQuestionFrenchFlow = ai.defineFlow(\n  {\n    name: 'medicalQuestionFrenchFlow',\n    inputSchema: MedicalQuestionFrenchInputSchema,\n    outputSchema: MedicalQuestionFrenchOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;AAGtD;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGO,eAAe,uCAAmB,GAAnB,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC,kKAAkK,CAAC;AAC9K;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":["file:///home/user/stagingMediLingua/src/ai/flows/medical-question-english.ts"],"sourcesContent":["// 'use server'\n'use server';\n/**\n * @fileOverview A medical question answering AI agent for English speakers.\n *\n * - medicalQuestionEnglish - A function that handles medical questions in English.\n * - MedicalQuestionEnglishInput - The input type for the medicalQuestionEnglish function.\n * - MedicalQuestionEnglishOutput - The return type for the medicalQuestionEnglish function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst MedicalQuestionEnglishInputSchema = z.object({\n  question: z.string().describe('The medical question in English.'),\n});\nexport type MedicalQuestionEnglishInput = z.infer<typeof MedicalQuestionEnglishInputSchema>;\n\nconst MedicalQuestionEnglishOutputSchema = z.object({\n  answer: z.string().describe('The answer to the medical question in English.'),\n});\nexport type MedicalQuestionEnglishOutput = z.infer<typeof MedicalQuestionEnglishOutputSchema>;\n\nexport async function medicalQuestionEnglish(input: MedicalQuestionEnglishInput): Promise<MedicalQuestionEnglishOutput> {\n  return medicalQuestionEnglishFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'medicalQuestionEnglishPrompt',\n  input: {schema: MedicalQuestionEnglishInputSchema},\n  output: {schema: MedicalQuestionEnglishOutputSchema},\n  prompt: `You are a helpful AI assistant that answers medical questions in English. Please answer the following question accurately and provide helpful information.\\n\\nQuestion: {{{question}}}`,\n});\n\nconst medicalQuestionEnglishFlow = ai.defineFlow(\n  {\n    name: 'medicalQuestionEnglishFlow',\n    inputSchema: MedicalQuestionEnglishInputSchema,\n    outputSchema: MedicalQuestionEnglishOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,eAAe;;;;;;AAEf;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGO,eAAe,uCAAoB,GAApB,uBAAuB,KAAkC;IAC7E,OAAO,2BAA2B;AACpC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC,sLAAsL,CAAC;AAClM;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///home/user/stagingMediLingua/src/ai/flows/audio-medical-question.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow that takes audio input, transcribes it, and answers the medical question.\n *\n * - audioMedicalQuestion - A function that handles the audio transcription and question answering.\n * - AudioMedicalQuestionInput - The input type for the audioMedicalQuestion function.\n * - AudioMedicalQuestionOutput - The return type for the audioMedicalQuestion function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AudioMedicalQuestionInputSchema = z.object({\n  audioDataUri: z\n    .string()\n    .describe(\n      \"Audio data URI containing the user's medical question.  It must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type AudioMedicalQuestionInput = z.infer<typeof AudioMedicalQuestionInputSchema>;\n\nconst AudioMedicalQuestionOutputSchema = z.object({\n  transcription: z.string().describe('The transcription of the audio input.'),\n  answer: z.string().describe('The answer to the medical question.'),\n});\nexport type AudioMedicalQuestionOutput = z.infer<typeof AudioMedicalQuestionOutputSchema>;\n\nexport async function audioMedicalQuestion(input: AudioMedicalQuestionInput): Promise<AudioMedicalQuestionOutput> {\n  return audioMedicalQuestionFlow(input);\n}\n\nconst transcribeAudioPrompt = ai.definePrompt({\n  name: 'transcribeAudioPrompt',\n  input: {schema: AudioMedicalQuestionInputSchema},\n  output: {schema: z.object({transcription: z.string()})},\n  prompt: `Transcribe the following audio recording of a medical question: {{media url=audioDataUri}}`,\n});\n\nconst answerMedicalQuestionPrompt = ai.definePrompt({\n  name: 'answerMedicalQuestionPrompt',\n  input: {schema: z.object({question: z.string()})},\n  output: {schema: z.object({answer: z.string()})},\n  prompt: `Answer the following medical question: {{{question}}}`,\n});\n\nconst audioMedicalQuestionFlow = ai.defineFlow(\n  {\n    name: 'audioMedicalQuestionFlow',\n    inputSchema: AudioMedicalQuestionInputSchema,\n    outputSchema: AudioMedicalQuestionOutputSchema,\n  },\n  async input => {\n    const {output: transcriptionResult} = await transcribeAudioPrompt(input);\n    const transcription = transcriptionResult!.transcription;\n\n    const {output: answerResult} = await answerMedicalQuestionPrompt({question: transcription});\n    const answer = answerResult!.answer;\n\n    return {transcription, answer};\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGO,eAAe,uCAAkB,GAAlB,qBAAqB,KAAgC;IACzE,OAAO,yBAAyB;AAClC;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA+B;IAC/C,QAAQ;QAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAE;IAAE;IACtD,QAAQ,CAAC,0FAA0F,CAAC;AACtG;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAE;IAAE;IAChD,QAAQ;QAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAE;IAAE;IAC/C,QAAQ,CAAC,qDAAqD,CAAC;AACjE;AAEA,MAAM,2BAA2B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC5C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,QAAQ,mBAAmB,EAAC,GAAG,MAAM,sBAAsB;IAClE,MAAM,gBAAgB,oBAAqB,aAAa;IAExD,MAAM,EAAC,QAAQ,YAAY,EAAC,GAAG,MAAM,4BAA4B;QAAC,UAAU;IAAa;IACzF,MAAM,SAAS,aAAc,MAAM;IAEnC,OAAO;QAAC;QAAe;IAAM;AAC/B;;;IAhCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file:///home/user/stagingMediLingua/src/components/chat-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ChatClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call ChatClient() from the server but ChatClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/chat-client.tsx <module evaluation>\",\n    \"ChatClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,gEACA","debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":["file:///home/user/stagingMediLingua/src/components/chat-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ChatClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call ChatClient() from the server but ChatClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/chat-client.tsx\",\n    \"ChatClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,4CACA","debugId":null}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":["file:///home/user/stagingMediLingua/src/app/chat/page.tsx"],"sourcesContent":["import { ChatClient } from '@/components/chat-client';\n\nexport default function ChatPage() {\n  return (\n    <div className=\"flex flex-col h-[calc(100vh-10rem)] md:h-[calc(100vh-12rem)]\"> \n      <ChatClient />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,oIAAA,CAAA,aAAU;;;;;;;;;;AAGjB","debugId":null}}]
}